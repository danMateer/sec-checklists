pentest_check_1:
  title: 'Broken Object Level Authorization'
  cluster: 'OWASP Top 10 2023 API1: Broken Object Level Authorization'
  description: |
    APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface of Object Level Access Control issues. Object level authorization checks should be considered in every function that accesses a data source using an ID from the user. 
   instruction: |
    The following vulnerability and weakness types should be tested and confirmed. Below you can find a list of URLs with guidelines that will help you to complete this check:

    - [Testing Directory traversal/file include](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/01-Testing_Directory_Traversal_File_Include)
    - [Testing for Bypassing Authorization Schema](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/02-Testing_for_Bypassing_Authorization_Schema)
    - [Testing for Privilege escalation](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/03-Testing_for_Privilege_Escalation)
    - [Testing for Insecure Direct Object References](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References)

pentest_check_2:
  title: 'Broken Authentication'
  cluster: 'OWASP Top 10 2023 API2: Broken Authentication'
  description: |
    Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently. Compromising system's ability to identify the client/user, compromises API security overall.
  instruction: |
    Check for the following in your assessment of the target APIs:

    - Credential stuffing - ensure an attacker cannot use brute force with a list of valid usernames and passwords.
    - Ensure attackers cannot perform a brute force attack on the same user account, without presenting captcha/account lockout mechanism.
    - Ensure weak passwords are not permitted.
    - Ensure sensitive authentication details are not sent, such as auth tokens and passwords in the URL.
    - Ensure users cannot to change their email address, current password, or do any other sensitive operations without asking for password confirmation.
    - Ensure the authenticity of tokens is validated.
    - Ensure unsigned/weakly signed JWT tokens are not accepted.
    - Ensure JWT expiration dates are validated.
    - Ensure the passwords are not transmitted in plain text, are non-encrypted, or are weakly hashed.
    - Ensure weak encryption keys are not used.
    - If a microservice, ensure other microservices can't access it without authentication.
    - If a microservice, ensure weak or predictable tokens are not used to enforce authentication.

pentest_check_3:
  title: 'Broken Object Property Level Authorization'
  cluster: 'OWASP Top 10 2023 API3: Broken Object Property Level Authorization'
  description: |
    This is a combintation of [Excessive Data Exposure](https://owasp.org/API-Security/editions/2019/en/0xa3-excessive-data-exposure/) and [Mass Assignment](https://owasp.org/API-Security/editions/2019/en/0xa6-mass-assignment/), focusing on the root cause: the lack of or improper authorization validation at the object property level. This leads to information exposure or manipulation by unauthorized parties.
  instruction: |
    Validate that the user has access to the specific object properties they are trying to access with the target API:

    - Ensure the API endpoint does not expose properties of an object that are considered sensitive and should not be read by the user.
    - Ensure the API endpoint does not allow a user to change, add/or delete the value of a sensitive object's property which the user should not be able to access

pentest_check_4:
  title: 'Unrestricted Resource Consumption'
  cluster: 'OWASP Top 10 2023 API4: Unrestricted Resource Consumption'
  description: |
    Satisfying API requests requires resources such as network bandwidth, CPU, memory, and storage. Other resources such as emails/SMS/phone calls or biometrics validation are made available by service providers via API integrations, and paid for per request. Successful attacks can lead to Denial of Service or an increase of operational costs.  
  instruction: |
    Ensure the following limits are not missing - or - are not set inappropriately (e.g. too low/high):

    - Execution timeouts.
    - Maximum allocable memory.
    - Maximum number of file descriptors.
    - Maximum number of processes.
    - Maximum upload file size.
    - Number of operations to perform in a single API client request (e.g. GraphQL batching).
    - Number of records per page to return in a single request-response.
    - Third-party service providers' spending limit.

checklist_check_5:
  title: 'Broken Function Level Authorization'
  cluster: 'OWASP Top 10 2023 API5: Broken Function Level Authorization'
  description: |
    Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws. By exploiting these issues, attackers gain access to other usersâ€™ resources and/or administrative functions.
  instruction: |
    Identify any broken function level authorization issues by conducting a thorough evaluation of the application's authorization mechanism. This evaluation should take into account the hierarchy of users, various roles or groups, and involve a series of checks, such as:
    
    - Ensure regular users or users with lower-level permissions cannot access administrative endpoints. Enforcement mechanism(s) should deny all access by default, requiring explicit grants to specific roles for access to every function.
    - Ensure users cannot perform sensitive actions (e.g. creation, modification, or deletion) that they should not have access to by simply changing the HTTP method (e.g. from GET to DELETE).
    - Ensure ussers from a group cannot access a function that should be exposed only to users from another by simply guessing the endpoint URL and parameters (e.g. /api/v1/users/export_all).

pentest_check_6:
  title: 'Unrestricted Access to Sensitive Business Flows'
  cluster: 'OWASP Top 10 2023 API6: Unrestricted Access to Sensitive Business Flows'
  description: |
    APIs vulnerable to this risk expose a business flow - such as buying a ticket, or posting a comment - without compensating for how the functionality could harm the business if used excessively in an automated manner. This doesn't necessarily come from implementation bugs.
  instruction: |
    Some business flows are more sensitive than others, in the sense that excessive access to them may harm the business. The risk of excessive access might change between industries and businesses. Identify any endpoints that expose a sensitive business flow, without appropriately restricting the access to it. Common examples include:

    - Purchasing a product flow: an attacker can buy all the stock of a high-demand item at once and resell for a higher price (scalping).
    - Creating a comment/post flow - an attacker can spam the system.
    - Making a reservation - an attacker can reserve all the available time slots and prevent other users from using the system.

pentest_check_7:
  title: 'Server Side Request Forgery'
  cluster: 'OWASP Top 10 2023 API7: Server Side Request Forgery'
  description: |
    Server-Side Request Forgery (SSRF) flaws can occur when an API is fetching a remote resource without validating the user-supplied URI. This enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.
  instruction: |
    Modern development concepts encourage developers to access an external resource based on user input: Webhooks, file fetching from URLs, custom SSO, and URL previews. cloud providers, Kubernetes, and Docker expose management and control channels over HTTP on predictable, well-known paths. Those channels are an easy target for an SSRF attack. Keep this in mind when testing for SSRF vulnerabilities:

    - [Testing for Server-Side Request Forgery (WSTG-INPV-19)](https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/19-Testing_for_Server-Side_Request_Forgery)

pentest_check_8:
  title: 'Security Misconfiguration'
  cluster: 'OWASP Top 10 2023 API8 - Security Misconfiguration'
  description: |
    APIs and the systems supporting them typically contain complex configurations, meant to make the APIs more customizable. Software and DevOps engineers can miss these configurations, or don't follow security best practices when it comes to configuration, opening the door for different types of attacks.  
  instruction: |
    Security misconfigurations not only expose sensitive user data, but also system details that can lead to full server compromise. Include the following applicable checks in evaluation of the APIs in scope:

    - Verify if all parts of the API stack are appropriately hardened. Check for improperly configured permissions, particularly in cloud services. Ensure that security configurations are robust and follow best practices.
    - Ensure that the systems and software are up-to-date with the latest security patches. Outdated systems often have known vulnerabilities that can be easily exploited.
    - Identify and disable unnecessary features in the API, such as certain HTTP verbs or logging features that are not required for the API's functionality. These can sometimes introduce security risks.
    - Investigate if there are any inconsistencies in how incoming requests are processed by servers in the HTTP server chain. This can indicate misconfigurations or vulnerabilities.
    - Confirm that Transport Layer Security (TLS) is properly implemented and configured. TLS is crucial for securing data in transit.
    - Check if security or cache control directives are being sent to clients correctly. These directives are important for maintaining the security and integrity of client-side data.
    - Review the Cross-Origin Resource Sharing (CORS) policy. Ensure it is present and correctly set. An improper CORS policy can lead to cross-domain security vulnerabilities.
    - Check the API's error messages to see if they include stack traces or expose sensitive information. Error messages should be informative but must not reveal too much information that could be useful to an attacker.

pentest_check_9:
  title: 'Improper Inventory Management'
  cluster: 'OWASP Top 10 2023 API9: Improper Inventory Management'
  description: |
    APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important. A proper inventory of hosts and deployed API versions also are important to mitigate issues such as deprecated API versions and exposed debug endpoints.  
  instruction: |
    Check for "documentation blindspots" where, within what you are able to and expected to access for the purposes of testing, the following apply:

    - It's unclear or unknown which environment is the API running in (e.g. production, staging, test, development).
    - It's unclear or unknown who should have network access to the API (e.g. public, internal, partners).
    - It's unclear or unknown which API version is running.
    - Within access, there is no documentation or the existing documentation is not updated.
    - There is no retirement plan for each API version.
    - The host's inventory is missing or outdated.

    Check for "data flow blindspots" where, within what you are able to and expected to access for the purposes of testing, the following apply:
    - There is a "sensitive data flow" where the API shares sensitive data with a third party and...
    - There is not a business justification or approval of the flow.
    - There is no inventory or visibility of the flow.
    - There is not deep visibility of which type of sensitive data is shared.

pentest_check_10:
  title: 'Unsafe Consumption of APIs'
  cluster: 'OWASP Top 10 2023 API10: Unsafe Consumption of APIs'
  description: |
    Developers tend to trust data received from third-party APIs more than user input, and so tend to adopt weaker security standards. In order to compromise APIs, attackers go after integrated third-party services instead of trying to compromise the target API directly.
  instruction: |
    Impact varies according to what the target API does with pulled data. Successful exploitation may lead to sensitive information exposure to unauthorized actors, many kinds of injections, or denial of service. Your assessment of the API assets should include the following:

    - Ensure the target API does not interact with other APIs over an unencrypted channel.
    - Ensure the target API properly validates and sanitizes data gathered from other APIs prior to processing it or passing it to downstream components.
    - Ensure the target API does not blindly follow redirections.
    - Ensure the target API limits the number of resources available to process third-party services responses.
    - Ensure the target API has implement timeouts for interactions with third-party services.
